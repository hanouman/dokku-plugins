#!/bin/bash
set -e;

# Check if name is specified
if [[ $1 == mongodb:* ]]; then
    if [[ -z $2 ]]; then
        echo "You must specify an app name"
        exit 1
    else
        APP="$2"
        # Check if app exists with the same name
        if [[ -d "$DOKKU_ROOT/$APP" ]]; then
            APP_EXISTS=true
        else
            APP_EXISTS=false
        fi
    fi
    if [[ ! -d "$PLUGIN_PATH/link" ]]; then
        echo "Link plugin not found... Did you install it from https://github.com/rlaneve/dokku-link?"
        exit 1
    fi

    PLUGIN_NAME="mongodb"
    DOCKER_IMAGE=$PLUGIN_NAME/$APP
    CONTAINER_NAME="${PLUGIN_NAME}_${APP}"
    HOST_DIR="$DOKKU_ROOT/$APP/$PLUGIN_NAME"
    ENVVAR_NAME="MONGO_URL"
fi

case "$1" in
  mongodb:create)
    # Check if mongodb container is installed
    IMAGE=$(docker images | grep "partlab/ubuntu-mongodb" | awk '{print $3}')
    if [[ -z $IMAGE ]]; then
        echo "mongodb image not found... Did you run 'dokku plugins-install' ?"
        exit 1
    fi

    # Stop existing container with the same persistent mongodb
    ID=$(docker ps | grep "$DOCKER_IMAGE":latest | awk '{print $1}')
    if [[ ! -z "$ID" ]]; then
        docker stop $ID > /dev/null
    fi

    # Fork docker image
    ID=$(docker run -d partlab/ubuntu-mongodb /bin/bash -c "exit 0")
    docker wait $ID > /dev/null
    IMAGE=$(docker commit $ID)
    docker tag $IMAGE $DOCKER_IMAGE

    # Check if an existing DB volume exists
    if [[ -d $HOST_DIR ]]; then
        echo "-----> Reusing $CONTAINER_NAME data"
    else
        mkdir -p $HOST_DIR
        chown -R dokku:dokku $HOST_DIR
    fi
    VOLUME="$HOST_DIR:/var/lib/mongodb"

    # Launch container
    docker run -p 172.17.42.1::27017 -p 172.17.42.1::28017 \
      -v $VOLUME -e MONGO_DATABASE=$APP \
      --name=$CONTAINER_NAME -d $DOCKER_IMAGE \
      /usr/bin/mongod --smallfiles

    # Link to a potential existing app
    dokku mongodb:link $APP $APP
    echo "-----> mongodb container created: $CONTAINER_NAME"
    sleep 1
    dokku mongodb:info $APP
    ;;

  mongodb:delete)
    # Stop the container
    ID=$(docker ps -a | grep "$DOCKER_IMAGE":latest | awk '{print $1}')
    if [[ ! -z $ID ]]; then
        docker stop $ID > /dev/null
        docker rm $ID  > /dev/null
    fi
    # Remove persistent volume
    if [[ -d $HOST_DIR ]]; then
        rm -rf $HOST_DIR
    fi

    # unlink this container as "mongodb"
    dokku link:delete "$APP" "$CONTAINER_NAME" "$PLUGIN_NAME"
    dokku config:unset "$APP" $ENVVAR_NAME
    echo "-----> mongodb container deleted: $CONTAINER_NAME"
    ;;

  mongodb:info)
    echo
    echo "       Docker image:   ${PLUGIN_NAME}/${APP}"
    echo "       Container name: ${CONTAINER_NAME}"
    echo "       Database:       ${APP}"
    echo
    ;;

  mongodb:link)
    if $APP_EXISTS; then
        # Check argument
        if [[ -z $3 ]]; then
            echo "You must specify a container name"
            exit 1
        fi
        CONTAINER_NAME="${PLUGIN_NAME}_${3}"

        # link this container as "mongodb"
        dokku link:create "$APP" "$CONTAINER_NAME" "$PLUGIN_NAME"

        # figure out IP to set env var
        ID=$(docker ps -a | grep "$CONTAINER_NAME" | awk '{print $1}')
        PORT=$(docker port $ID 27017 | sed 's/172.17.42.1://')
        dokku config:set "$APP" $ENVVAR_NAME="mongodb://root@172.17.42.1:$PORT/$APP"
        echo "-----> $APP linked to $CONTAINER_NAME container"
    fi
    ;;

  mongodb:logs)
    ID=$(docker ps -a | grep "$DOCKER_IMAGE":latest | awk '{print $1}')
    docker logs $ID | tail -n 100
    ;;

  help)
    cat && cat<<EOF
    mongodb:create <app>                            Create a mongodb container
    mongodb:delete <app>                            Delete specified mongodb container
    mongodb:info <app>                              Display container informations
    mongodb:link <app> <container>                  Link an app to a mongodb container
    mongodb:logs <app>                              Display last logs from mongodb container
EOF
    ;;

esac
